// Mocks generated by Mockito 5.4.4 from annotations
// in volunteersapp/test/mock_config/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i30;
import 'package:dio/dio.dart' as _i20;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i21;
import 'package:dio/src/dio_mixin.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:flutter/material.dart' as _i32;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i23;
import 'package:shared_preferences/shared_preferences.dart' as _i19;
import 'package:sqflite_common/sql.dart' as _i24;
import 'package:sqflite_common/sqlite_api.dart' as _i8;
import 'package:volunteersapp/core/http/abstract_http_client.dart' as _i7;
import 'package:volunteersapp/core/http/dio_http_client.dart' as _i22;
import 'package:volunteersapp/core/http/response_data.dart' as _i10;
import 'package:volunteersapp/modules/auth/data/authentication/auth_login_model.dart'
    as _i27;
import 'package:volunteersapp/modules/auth/data/authentication/auth_signIn_with_password_model/signin_with_password_Model.dart'
    as _i25;
import 'package:volunteersapp/modules/auth/data/authentication/auth_signup_with_email_password/signup_with_email_and_password.dart'
    as _i26;
import 'package:volunteersapp/modules/auth/domain/repositories/abstract_repositories/abstractions/abstract_auth_local_repository.dart'
    as _i12;
import 'package:volunteersapp/modules/auth/domain/repositories/abstract_repositories/abstractions/abstract_auth_repository.dart'
    as _i11;
import 'package:volunteersapp/modules/auth/domain/repositories/abstract_repositories/abstractions/abstract_auth_repository_datasource.dart'
    as _i28;
import 'package:volunteersapp/modules/auth/domain/usecases/auth_use_case.dart'
    as _i13;
import 'package:volunteersapp/modules/auth/presentation/cubits/auth_cubit.dart'
    as _i29;
import 'package:volunteersapp/modules/auth/presentation/state/auth_page_state.dart'
    as _i14;
import 'package:volunteersapp/modules/home/presentation/cubits/home_cubit.dart'
    as _i31;
import 'package:volunteersapp/modules/home/presentation/state/home_page_state.dart'
    as _i15;
import 'package:volunteersapp/modules/home/presentation/widgets/card_cubit.dart'
    as _i34;
import 'package:volunteersapp/modules/home/presentation/widgets/home_card.dart'
    as _i33;
import 'package:volunteersapp/modules/notification/presentation/cubits/notification_cubit.dart'
    as _i37;
import 'package:volunteersapp/modules/notification/presentation/state/notification_page_state.dart'
    as _i18;
import 'package:volunteersapp/modules/settings/presentation/cubits/settings_cubit.dart'
    as _i35;
import 'package:volunteersapp/modules/settings/presentation/state/settings_page_state.dart'
    as _i16;
import 'package:volunteersapp/modules/work/presentation/cubits/work_cubit.dart'
    as _i36;
import 'package:volunteersapp/modules/work/presentation/state/work_page_state.dart'
    as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBaseOptions_0 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_1 extends _i1.SmartFake
    implements _i3.HttpClientAdapter {
  _FakeHttpClientAdapter_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_2 extends _i1.SmartFake implements _i4.Transformer {
  _FakeTransformer_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_3 extends _i1.SmartFake implements _i5.Interceptors {
  _FakeInterceptors_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_4<T1> extends _i1.SmartFake implements _i6.Response<T1> {
  _FakeResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpResponse_5<T1> extends _i1.SmartFake
    implements _i7.HttpResponse<T1> {
  _FakeHttpResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_6 extends _i1.SmartFake implements _i8.Database {
  _FakeDatabase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_7<T1> extends _i1.SmartFake implements _i9.Future<T1> {
  _FakeFuture_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_8 extends _i1.SmartFake implements _i8.QueryCursor {
  _FakeQueryCursor_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_9 extends _i1.SmartFake implements _i8.Batch {
  _FakeBatch_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponseData_10<T> extends _i1.SmartFake
    implements _i10.ResponseData<T> {
  _FakeResponseData_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractAuthRepository_11 extends _i1.SmartFake
    implements _i11.AbstractAuthRepository {
  _FakeAbstractAuthRepository_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAbstractAuthLocalRepository_12 extends _i1.SmartFake
    implements _i12.AbstractAuthLocalRepository {
  _FakeAbstractAuthLocalRepository_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthUseCase_13 extends _i1.SmartFake implements _i13.AuthUseCase {
  _FakeAuthUseCase_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthPageState_14 extends _i1.SmartFake
    implements _i14.AuthPageState {
  _FakeAuthPageState_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_15 extends _i1.SmartFake implements _i15.HomeState {
  _FakeHomeState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsPageState_16 extends _i1.SmartFake
    implements _i16.SettingsPageState {
  _FakeSettingsPageState_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWorkState_17 extends _i1.SmartFake implements _i17.WorkState {
  _FakeWorkState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationPageState_18 extends _i1.SmartFake
    implements _i18.NotificationPageState {
  _FakeNotificationPageState_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i19.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i9.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i20.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.BaseOptions);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_1(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i3.HttpClientAdapter);

  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_2(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i4.Transformer);

  @override
  set transformer(_i4.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_3(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i5.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i6.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i21.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i21.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i9.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<dynamic>>);

  @override
  _i9.Future<_i6.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i21.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i9.Future<_i6.Response<dynamic>>.value(_FakeResponse_4<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<dynamic>>);

  @override
  _i9.Future<_i6.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i21.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i21.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);

  @override
  _i9.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i9.Future<_i6.Response<T>>.value(_FakeResponse_4<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i9.Future<_i6.Response<T>>);
}

/// A class which mocks [DioHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioHttpClient extends _i1.Mock implements _i22.DioHttpClient {
  MockDioHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiServerName => (super.noSuchMethod(
        Invocation.getter(#apiServerName),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.getter(#apiServerName),
        ),
      ) as String);

  @override
  set apiServerName(String? _apiServerName) => super.noSuchMethod(
        Invocation.setter(
          #apiServerName,
          _apiServerName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get apiServerAuth => (super.noSuchMethod(
        Invocation.getter(#apiServerAuth),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.getter(#apiServerAuth),
        ),
      ) as String);

  @override
  set apiServerAuth(String? _apiServerAuth) => super.noSuchMethod(
        Invocation.setter(
          #apiServerAuth,
          _apiServerAuth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<_i7.HttpResponse<T>> post<T>(
    String? path, {
    Map<String, dynamic>? data,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
          },
        ),
        returnValue:
            _i9.Future<_i7.HttpResponse<T>>.value(_FakeHttpResponse_5<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i9.Future<_i7.HttpResponse<T>>);

  @override
  _i9.Future<_i7.HttpResponse<T>> put<T>(
    String? path, {
    Map<String, dynamic>? data,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
          },
        ),
        returnValue:
            _i9.Future<_i7.HttpResponse<T>>.value(_FakeHttpResponse_5<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i9.Future<_i7.HttpResponse<T>>);

  @override
  _i9.Future<_i7.HttpResponse<T>> get<T>(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue:
            _i9.Future<_i7.HttpResponse<T>>.value(_FakeHttpResponse_5<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {#queryParameters: queryParameters},
          ),
        )),
      ) as _i9.Future<_i7.HttpResponse<T>>);

  @override
  _i9.Future<_i7.HttpResponse<T>> delete<T>(
    String? path, {
    Map<String, dynamic>? data,
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
          },
        ),
        returnValue:
            _i9.Future<_i7.HttpResponse<T>>.value(_FakeHttpResponse_5<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
            },
          ),
        )),
      ) as _i9.Future<_i7.HttpResponse<T>>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i8.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i23.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  _i8.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_6(
          this,
          Invocation.getter(#database),
        ),
      ) as _i8.Database);

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<T> transaction<T>(
    _i9.Future<T> Function(_i8.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _i23.ifNotNull(
              _i23.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #transaction,
                  [action],
                  {#exclusive: exclusive},
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #transaction,
                [action],
                {#exclusive: exclusive},
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<T> readTransaction<T>(
          _i9.Future<T> Function(_i8.Transaction)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #readTransaction,
          [action],
        ),
        returnValue: _i23.ifNotNull(
              _i23.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #readTransaction,
                  [action],
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #readTransaction,
                [action],
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _i23.ifNotNull(
              _i23.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeMethod,
                  [
                    method,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #devInvokeMethod,
                [
                  method,
                  arguments,
                ],
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _i23.ifNotNull(
              _i23.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #devInvokeSqlMethod,
                  [
                    method,
                    sql,
                    arguments,
                  ],
                ),
              ),
              (T v) => _i9.Future<T>.value(v),
            ) ??
            _FakeFuture_7<T>(
              this,
              Invocation.method(
                #devInvokeSqlMethod,
                [
                  method,
                  sql,
                  arguments,
                ],
              ),
            ),
      ) as _i9.Future<T>);

  @override
  _i9.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i24.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i9.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i9.Future<List<Map<String, Object?>>>);

  @override
  _i9.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i9.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i9.Future<List<Map<String, Object?>>>);

  @override
  _i9.Future<_i8.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i9.Future<_i8.QueryCursor>.value(_FakeQueryCursor_8(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i9.Future<_i8.QueryCursor>);

  @override
  _i9.Future<_i8.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i9.Future<_i8.QueryCursor>.value(_FakeQueryCursor_8(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i9.Future<_i8.QueryCursor>);

  @override
  _i9.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i24.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i9.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i9.Future<int>.value(0),
      ) as _i9.Future<int>);

  @override
  _i8.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_9(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i8.Batch);
}

/// A class which mocks [AbstractAuthLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractAuthLocalRepository extends _i1.Mock
    implements _i12.AbstractAuthLocalRepository {
  MockAbstractAuthLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i25.SignInWithPasswordResponseModel?> readAuthToken() =>
      (super.noSuchMethod(
        Invocation.method(
          #readAuthToken,
          [],
        ),
        returnValue: _i9.Future<_i25.SignInWithPasswordResponseModel?>.value(),
      ) as _i9.Future<_i25.SignInWithPasswordResponseModel?>);

  @override
  _i9.Future<void> saveAuthToken(_i26.SignUpWithEmailAndPassword? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAuthToken,
          [token],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> saveAuthTokenlocal(
          _i25.SignInWithPasswordResponseModel? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAuthTokenlocal,
          [token],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteAuthToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteAuthToken,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AbstractAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbstractAuthRepository extends _i1.Mock
    implements _i11.AbstractAuthRepository {
  MockAbstractAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>> signUp(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            returnSecureToken,
          ],
        ),
        returnValue: _i9
            .Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>>.value(
            _FakeResponseData_10<_i26.SignUpWithEmailAndPassword>(
          this,
          Invocation.method(
            #signUp,
            [
              email,
              password,
              returnSecureToken,
            ],
          ),
        )),
      ) as _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>>);

  @override
  _i9.Future<_i10.ResponseData<_i27.AuthLoginModel>> getlogin(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getlogin,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<_i10.ResponseData<_i27.AuthLoginModel>>.value(
            _FakeResponseData_10<_i27.AuthLoginModel>(
          this,
          Invocation.method(
            #getlogin,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i9.Future<_i10.ResponseData<_i27.AuthLoginModel>>);

  @override
  _i9.Future<_i10.ResponseData<_i25.SignInWithPasswordResponseModel>>
      signInWithEmailAndPassword(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #signInWithEmailAndPassword,
              [
                email,
                password,
                returnSecureToken,
              ],
            ),
            returnValue: _i9.Future<
                    _i10
                    .ResponseData<_i25.SignInWithPasswordResponseModel>>.value(
                _FakeResponseData_10<_i25.SignInWithPasswordResponseModel>(
              this,
              Invocation.method(
                #signInWithEmailAndPassword,
                [
                  email,
                  password,
                  returnSecureToken,
                ],
              ),
            )),
          ) as _i9
              .Future<_i10.ResponseData<_i25.SignInWithPasswordResponseModel>>);
}

/// A class which mocks [AbastractAuthRepositoryDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAbastractAuthRepositoryDataSource extends _i1.Mock
    implements _i28.AbastractAuthRepositoryDataSource {
  MockAbastractAuthRepositoryDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>?> signUp(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            returnSecureToken,
          ],
        ),
        returnValue: _i9.Future<
            _i10.ResponseData<_i26.SignUpWithEmailAndPassword>?>.value(),
      ) as _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>?>);

  @override
  _i9.Future<_i10.ResponseData<_i25.SignInWithPasswordResponseModel>?>
      signInWithEmailAndPassword(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #signInWithEmailAndPassword,
              [
                email,
                password,
                returnSecureToken,
              ],
            ),
            returnValue: _i9.Future<
                _i10
                .ResponseData<_i25.SignInWithPasswordResponseModel>?>.value(),
          ) as _i9.Future<
              _i10.ResponseData<_i25.SignInWithPasswordResponseModel>?>);

  @override
  _i9.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i13.AuthUseCase {
  MockAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.AbstractAuthRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAbstractAuthRepository_11(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i11.AbstractAuthRepository);

  @override
  _i12.AbstractAuthLocalRepository get localRepository => (super.noSuchMethod(
        Invocation.getter(#localRepository),
        returnValue: _FakeAbstractAuthLocalRepository_12(
          this,
          Invocation.getter(#localRepository),
        ),
      ) as _i12.AbstractAuthLocalRepository);

  @override
  _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>> signUp(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            returnSecureToken,
          ],
        ),
        returnValue: _i9
            .Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>>.value(
            _FakeResponseData_10<_i26.SignUpWithEmailAndPassword>(
          this,
          Invocation.method(
            #signUp,
            [
              email,
              password,
              returnSecureToken,
            ],
          ),
        )),
      ) as _i9.Future<_i10.ResponseData<_i26.SignUpWithEmailAndPassword>>);

  @override
  _i9.Future<_i10.ResponseData<_i25.SignInWithPasswordResponseModel>>
      signInWithEmailAndPassword(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #signInWithEmailAndPassword,
              [
                email,
                password,
                returnSecureToken,
              ],
            ),
            returnValue: _i9.Future<
                    _i10
                    .ResponseData<_i25.SignInWithPasswordResponseModel>>.value(
                _FakeResponseData_10<_i25.SignInWithPasswordResponseModel>(
              this,
              Invocation.method(
                #signInWithEmailAndPassword,
                [
                  email,
                  password,
                  returnSecureToken,
                ],
              ),
            )),
          ) as _i9
              .Future<_i10.ResponseData<_i25.SignInWithPasswordResponseModel>>);
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i29.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.AuthUseCase get loginUseCase => (super.noSuchMethod(
        Invocation.getter(#loginUseCase),
        returnValue: _FakeAuthUseCase_13(
          this,
          Invocation.getter(#loginUseCase),
        ),
      ) as _i13.AuthUseCase);

  @override
  _i14.AuthPageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthPageState_14(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.AuthPageState);

  @override
  _i9.Stream<_i14.AuthPageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i14.AuthPageState>.empty(),
      ) as _i9.Stream<_i14.AuthPageState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> signUp(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [
            email,
            password,
            returnSecureToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> signInWithEmailAndPassword(
    String? email,
    String? password,
    bool? returnSecureToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
            returnSecureToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i14.AuthPageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<_i14.AuthPageState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [AuthPageState].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthPageState extends _i1.Mock implements _i14.AuthPageState {
  MockAuthPageState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [AuthPageStateInitial].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthPageStateInitial extends _i1.Mock
    implements _i14.AuthPageStateInitial {
  MockAuthPageStateInitial() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i27.AuthLoginModel> get listAuthLogin => (super.noSuchMethod(
        Invocation.getter(#listAuthLogin),
        returnValue: <_i27.AuthLoginModel>[],
      ) as List<_i27.AuthLoginModel>);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [AuthPageLoading].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthPageLoading extends _i1.Mock implements _i14.AuthPageLoading {
  MockAuthPageLoading() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [AuthPageLoaded].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthPageLoaded extends _i1.Mock implements _i14.AuthPageLoaded {
  MockAuthPageLoaded() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i27.AuthLoginModel> get listAuthLogin => (super.noSuchMethod(
        Invocation.getter(#listAuthLogin),
        returnValue: <_i27.AuthLoginModel>[],
      ) as List<_i27.AuthLoginModel>);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i31.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.AbstractAuthLocalRepository get authLocalRepository =>
      (super.noSuchMethod(
        Invocation.getter(#authLocalRepository),
        returnValue: _FakeAbstractAuthLocalRepository_12(
          this,
          Invocation.getter(#authLocalRepository),
        ),
      ) as _i12.AbstractAuthLocalRepository);

  @override
  _i15.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.HomeState);

  @override
  _i9.Stream<_i15.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i15.HomeState>.empty(),
      ) as _i9.Stream<_i15.HomeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> logout(_i32.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [context],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void updateIcons(List<_i32.IconData>? updatedIcons) => super.noSuchMethod(
        Invocation.method(
          #updateIcons,
          [updatedIcons],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<_i15.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [HomeState].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeState extends _i1.Mock implements _i15.HomeState {
  MockHomeState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i33.HomeCard> get cards => (super.noSuchMethod(
        Invocation.getter(#cards),
        returnValue: <_i33.HomeCard>[],
      ) as List<_i33.HomeCard>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i15.HomeState copyWith({required List<_i33.HomeCard>? cards}) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {#cards: cards},
        ),
        returnValue: _FakeHomeState_15(
          this,
          Invocation.method(
            #copyWith,
            [],
            {#cards: cards},
          ),
        ),
      ) as _i15.HomeState);
}

/// A class which mocks [HomeInitial].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeInitial extends _i1.Mock implements _i15.HomeInitial {
  MockHomeInitial() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i33.HomeCard> get cards => (super.noSuchMethod(
        Invocation.getter(#cards),
        returnValue: <_i33.HomeCard>[],
      ) as List<_i33.HomeCard>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i15.HomeState copyWith({required List<_i33.HomeCard>? cards}) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {#cards: cards},
        ),
        returnValue: _FakeHomeState_15(
          this,
          Invocation.method(
            #copyWith,
            [],
            {#cards: cards},
          ),
        ),
      ) as _i15.HomeState);
}

/// A class which mocks [HomeStateUpdated].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeStateUpdated extends _i1.Mock implements _i15.HomeStateUpdated {
  MockHomeStateUpdated() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i33.HomeCard> get cards => (super.noSuchMethod(
        Invocation.getter(#cards),
        returnValue: <_i33.HomeCard>[],
      ) as List<_i33.HomeCard>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i15.HomeState copyWith({required List<_i33.HomeCard>? cards}) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {#cards: cards},
        ),
        returnValue: _FakeHomeState_15(
          this,
          Invocation.method(
            #copyWith,
            [],
            {#cards: cards},
          ),
        ),
      ) as _i15.HomeState);
}

/// A class which mocks [CardCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardCubit extends _i1.Mock implements _i34.CardCubit {
  MockCardCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i33.HomeCard> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: <_i33.HomeCard>[],
      ) as List<_i33.HomeCard>);

  @override
  _i9.Stream<List<_i33.HomeCard>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<List<_i33.HomeCard>>.empty(),
      ) as _i9.Stream<List<_i33.HomeCard>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void addCard(_i33.HomeCard? card) => super.noSuchMethod(
        Invocation.method(
          #addCard,
          [card],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(List<_i33.HomeCard>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<List<_i33.HomeCard>>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [SettingsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsCubit extends _i1.Mock implements _i35.SettingsCubit {
  MockSettingsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.SettingsPageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSettingsPageState_16(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.SettingsPageState);

  @override
  _i9.Stream<_i16.SettingsPageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i16.SettingsPageState>.empty(),
      ) as _i9.Stream<_i16.SettingsPageState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void emit(_i16.SettingsPageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<_i16.SettingsPageState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [WorkCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkCubit extends _i1.Mock implements _i36.WorkCubit {
  MockWorkCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.WorkState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWorkState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.WorkState);

  @override
  _i9.Stream<_i17.WorkState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i17.WorkState>.empty(),
      ) as _i9.Stream<_i17.WorkState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void emit(_i17.WorkState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<_i17.WorkState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [NotificationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationCubit extends _i1.Mock implements _i37.NotificationCubit {
  MockNotificationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.NotificationPageState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNotificationPageState_18(
          this,
          Invocation.getter(#state),
        ),
      ) as _i18.NotificationPageState);

  @override
  _i9.Stream<_i18.NotificationPageState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i18.NotificationPageState>.empty(),
      ) as _i9.Stream<_i18.NotificationPageState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void emit(_i18.NotificationPageState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i30.Change<_i18.NotificationPageState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
